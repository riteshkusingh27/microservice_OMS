<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/apigateway/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apigateway/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com&lt;/groupId&gt;&#10;        &lt;artifactId&gt;microservice-oms&lt;/artifactId&gt;&#10;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;    &lt;/parent&gt;&#10;&#10;    &lt;artifactId&gt;apigateway&lt;/artifactId&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;22&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;22&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-cloud-starter-gateway-server-webflux&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-oauth2-resource-server&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;    &lt;/dependencies&gt;&#10;&#10;&#10;&lt;/project&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com&lt;/groupId&gt;&#10;        &lt;artifactId&gt;microservice-oms&lt;/artifactId&gt;&#10;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;    &lt;/parent&gt;&#10;&#10;    &lt;artifactId&gt;apigateway&lt;/artifactId&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;22&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;22&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-oauth2-resource-server&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;    &lt;/dependencies&gt;&#10;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apigateway/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apigateway/src/main/resources/application.properties" />
              <option name="originalContent" value="eureka.client.serviceUrl.defaultZone=http://localhost:8457/eureka/&#10;spring.application.name=api-gateway&#10;logging.level.root=INFO&#10;logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=INFO&#10;logging.level.org.springframework.cloud.gateway=DEBUG&#10;logging.level.org.springframework.http.server.reactive=DEBUG&#10;logging.level.org.springframework.web.reactive=DEBUG&#10;logging.level.org.springframework.boot.autoconfigure.web=DEBUG&#10;logging.level.org.springframework.web=DEBUG&#10;logging.level.reactor.netty=DEBUG&#10;logging.level.reactor.netty.http.client=DEBUG&#10;&#10;server.port=8056&#10;&#10;# Product service route&#10;spring.cloud.gateway.server.webflux.routes[0].id=product-service&#10;spring.cloud.gateway.routes.product_service_route.uri=lb://product-service&#10;spring.cloud.gateway.routes.product_service_route.predicates[0]=Path=/api/product/**&#10;&#10;# Order service route&#10;spring.cloud.gateway.routes.order_service_route.id=order-service&#10;spring.cloud.gateway.routes.order_service_route.uri=lb://order-service&#10;spring.cloud.gateway.routes.order_service_route.predicates[0]=Path=/api/order/**&#10;&#10;#Discovery server route&#10;spring.cloud.gateway.routes.eureka_web_route.id=eureka-web&#10;spring.cloud.gateway.routes.eureka_web_route.uri=http://localhost:8457&#10;spring.cloud.gateway.routes.eureka_web_route.predicates[0]=Path=/eureka/web&#10;#rewrites request path before rerouting!!!&#10;spring.cloud.gateway.routes.eureka_web_route.filters[0]=SetPath=/&#10;&#10;#Discovery server static resources route&#10;spring.cloud.gateway.routes.eureka_static_route.id=eureka-static&#10;spring.cloud.gateway.routes.eureka_static_route.uri=http://localhost:8457&#10;spring.cloud.gateway.routes.eureka_static_route.predicates[0]=Path=/eureka/**&#10;&#10;&#10;#Resource server configuration&#10;    spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8350/realms/springbootmicroservices&#10;" />
              <option name="updatedContent" value="eureka.client.serviceUrl.defaultZone=http://localhost:8457/eureka/&#10;spring.application.name=api-gateway&#10;logging.level.root=INFO&#10;logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=INFO&#10;logging.level.org.springframework.cloud.gateway=DEBUG&#10;logging.level.org.springframework.http.server.reactive=DEBUG&#10;logging.level.org.springframework.web.reactive=DEBUG&#10;logging.level.org.springframework.boot.autoconfigure.web=DEBUG&#10;logging.level.org.springframework.web=DEBUG&#10;logging.level.reactor.netty=DEBUG&#10;logging.level.reactor.netty.http.client=DEBUG&#10;&#10;server.port=8080&#10;&#10;# Product service route&#10;spring.cloud.gateway.routes[0].id=product-service&#10;spring.cloud.gateway.routes[0].uri=lb://product-service&#10;spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product/**&#10;&#10;# Order service route&#10;spring.cloud.gateway.routes[1].id=order-service&#10;spring.cloud.gateway.routes[1].uri=lb://order-service&#10;spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order/**&#10;&#10;# Discovery server route&#10;spring.cloud.gateway.routes[2].id=eureka-web&#10;spring.cloud.gateway.routes[2].uri=http://localhost:8457&#10;spring.cloud.gateway.routes[2].predicates[0]=Path=/eureka/web&#10;spring.cloud.gateway.routes[2].filters[0]=SetPath=/&#10;&#10;# Discovery server static resources route&#10;spring.cloud.gateway.routes[3].id=eureka-static&#10;spring.cloud.gateway.routes[3].uri=http://localhost:8457&#10;spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/**&#10;&#10;# Resource server configuration&#10;spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8350/realms/springbootmicroservices" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/discoveryserver/src/main/java/com/DiscoveryServerApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/discoveryserver/src/main/java/com/DiscoveryServerApplication.java" />
              <option name="originalContent" value="package com;&#10;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;&#10;&#10;@SpringBootApplication&#10;@EnableEurekaServer   // creates a discovery server&#10;public class DiscoveryServerApplication {&#10;    public  static void main(String [] args){&#10;        SpringApplication.run(DiscoveryServerApplication.class, args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com;&#13;&#10;&#13;&#10;&#13;&#10;import org.springframework.boot.SpringApplication;&#13;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#13;&#10;import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;&#13;&#10;import org.springframework.context.annotation.ComponentScan;&#13;&#10;&#13;&#10;@SpringBootApplication&#13;&#10;@EnableEurekaServer   // creates a discovery server&#13;&#10;@ComponentScan(basePackages = {&quot;com&quot;, &quot;config&quot;})&#13;&#10;public class DiscoveryServerApplication {&#13;&#10;    public static void main(String[] args){&#13;&#10;        SpringApplication.run(DiscoveryServerApplication.class, args);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/discoveryserver/src/main/java/config/Securityconfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/discoveryserver/src/main/java/config/Securityconfig.java" />
              <option name="originalContent" value="package config;&#10;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.Customizer;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;&#10;import org.springframework.security.core.userdetails.User;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.provisioning.InMemoryUserDetailsManager;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;public class Securityconfig {&#10;&#10;    @Value(&quot;${eureka.username}&quot;)&#10;    private String username;&#10;    @Value(&quot;${eureka.password}&quot;)&#10;    private String password;&#10;&#10;&#10;    @Bean&#10;    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {&#10;        http.csrf(AbstractHttpConfigurer::disable)&#10;                .authorizeHttpRequests(auth -&gt; auth.anyRequest().authenticated())&#10;                .httpBasic(Customizer.withDefaults());&#10;&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public UserDetailsService userdetailservice ()  {&#10;        InMemoryUserDetailsManager u = new InMemoryUserDetailsManager();&#10;        UserDetails user = User.withUsername(username&#10;                )&#10;                .password(password)&#10;                .authorities(&quot;USER&quot;)&#10;&#10;                .build();&#10;&#10;        u.createUser(user);&#10;        return u;&#10;    }&#10;&#10;//    @Bean&#10;//    public PasswordEncoder passwordEncoder() {&#10;//        return new BCryptPasswordEncoder();&#10;//    }&#10;}" />
              <option name="updatedContent" value="package config;&#10;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.Customizer;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;&#10;import org.springframework.security.core.userdetails.User;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.provisioning.InMemoryUserDetailsManager;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;public class Securityconfig {&#10;&#10;    @Value(&quot;${eureka.username}&quot;)&#10;    private String username;&#10;    @Value(&quot;${eureka.password}&quot;)&#10;    private String password;&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;&#10;    @Bean&#10;    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {&#10;        http.csrf(AbstractHttpConfigurer::disable)&#10;                .authorizeHttpRequests(auth -&gt; auth.anyRequest().authenticated())&#10;                .httpBasic(Customizer.withDefaults());&#10;&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public UserDetailsService userdetailservice(PasswordEncoder passwordEncoder) {&#10;        InMemoryUserDetailsManager userManager = new InMemoryUserDetailsManager();&#10;        UserDetails user = User.builder()&#10;                .username(username)&#10;                .password(passwordEncoder.encode(password))&#10;                .authorities(&quot;USER&quot;)&#10;                .build();&#10;&#10;        userManager.createUser(user);&#10;        return userManager;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>